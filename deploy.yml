--- # deployment of devops workstation

# mongo
# https://download.studio3t.com/studio-3t/linux/2018.2.4/studio-3t-linux-x64.tar.gz
# https://studio3t.com/download-thank-you/?OS=x64


# curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube
# curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl
#  https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip

# curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 && chmod +x docker-machine-driver-kvm2 && sudo mv docker-machine-driver-kvm2 /usr/bin/
# minikube start --vm-driver kvm2

# https://docs.microsoft.com/en-gb/sql/sql-operations-studio/download

- hosts: all:localhost
  gather_facts: no

  roles:
    - profiles


- hosts: localhost
  become: yes

  vars:
    # Set the version of Node.js to install ("0.12", "4.x", "5.x", "6.x", "8.x").
    # Version numbers from Nodesource: https://github.com/nodesource/distributions
    nodejs_version: "8.x"
    go_version: 1.11
    npm_config_prefix: "/usr"

    devops_user: "{{ lookup('env', 'USER') }}"

    # Set to true to suppress the UID/GID switching when running 
    # package scripts. If set explicitly to false, then installing as a 
    # non-root user will fail.
    npm_config_unsafe_perm: "false"

    pip_modules:
      - ansible-lint # https://github.com/willthames/ansible-lint
      - awscli   # http://docs.aws.amazon.com/cli/latest/userguide/getting-help.html
      - boto3    # https://boto3.readthedocs.io/en/latest/guide/quickstart.html
      - jmespath
      - ec2-ssh
      - docker-compose
      - httpstat
      - docker
      - molecule           # https://molecule.readthedocs.io
      - testinfra
      - pylint
      - pre-commit         # https://pre-commit.com/
      - speedtest_cli
      - python-openstackclient
      - jmespath-terminal  # jpterm https://github.com/jmespath/jmespath.terminal
      - cheat              # https://github.com/chrisallenlane/cheaf
      # python-pthon-PROJECTclient  # https://docs.openstack.org/newton/user-guide/common/cli-install-openstack-command-line-clients.html

    npm_modules:
      - jsonlint
      - jslint
      - serverless

    vagrant_plugins:
      - vagrant-hosts   # https://github.com/oscar-stack/vagrant-hosts
      - vagrant-vbox-snapshot
      - vagrant-vbguest # required to install VirtualBox Guest Addtions into the Virtual Machine
      - vagrant-aws
      - vagrant-google
      - vagrant-libvirt
      - vagrant-openstack-provider

    snap_classic_packages:
      - powershell
      - goland
      - phpstorm
      - pycharm-professional
      # skype
      # slack

    snap_packages:
      - spotify
      - vlc
      # lxd


  tasks:
    - include_tasks: deploy-debian.yml
      become: yes
      when: ansible_os_family == 'Debian'
      tags: package

    - name: "Download go"
      get_url:
        url: "https://dl.google.com/go/go{{ go_version}}.linux-amd64.tar.gz"
        dest: "/usr/local/src/go_{{ go_version }}.tgz"

    - name: "Extract and install go"
      unarchive:
        src: /usr/local/src/go_{{ go_version }}.tgz
        dest: /usr/local

    #
    # Get latest assume
    #
    - name: "get latest AWS assume role"
      uri:
        url: "https://github.com/s3than/assume/releases/latest"
        return_contents: no 
      register: output_result


    - name: "get latest version"
      set_fact:
        assume_latest: "{{ output_result.url | basename }}"

    - debug:
        var: assume_latest

    - name: "Download assume"
      get_url:
        url: "https://github.com/s3than/assume/releases/download/{{ assume_latest }}/assume_{{ assume_latest }}_linux_amd64.tgz"
        dest: "/usr/local/src/assume_{{ assume_latest }}.tgz"

    - name: "Extract and install assume"
      unarchive:
        src: /usr/local/src/assume_{{ assume_latest }}.tgz
        dest: /usr/local/src

    # developer keeps changing the location the assume command is located at.
    - name: "Find the assume command"
      find:
        paths: /usr/local/src
        patterns: "assume"
        recurse: yes
      register: assume_files

    - name: "Find latest"
      set_fact:
        assume_file: "{{ assume_files.files | sort(attribute='mtime',reverse=true) | first }}"

    - name: "copy newest version of assume to bin directory"
      copy:
        src: "{{ assume_file.path }}"
        dest: "/usr/local/bin/assume"
        mode: 0755


    #
    # Get latest minikube
    #
    - name: "get latest minikube verion"
      uri:
        url: "https://github.com/kubernetes/minikube/releases/latest"
        return_contents: no 
      register: output_result


    - name: "get latest version"
      set_fact:
        minikube_latest: "{{ output_result.url | basename }}"

    - debug:
        var: minikube_latest


    - name: "Download latest minikube kvm2 driver"
      get_url:
        url: "https://github.com/kubernetes/minikube/releases/download/{{ minikube_latest }}/docker-machine-driver-kvm2"
        dest: "/usr/bin/docker-machine-driver-kvm2"
        mode: 0755

    - name: "Download minikube latest"
      get_url:
        url: "https://github.com/kubernetes/minikube/releases/download/v0.28.0/minikube-linux-amd64"
        dest: "/usr/local/bin/minikube"
        mode: 0755



    #
    # Get latest helm
    #
    - name: "get latest kubunetes heml verion"
      uri:
        url: "https://github.com/kubernetes/helm/releases/latest"
        return_contents: no 
      register: output_result


    - name: "get latest version"
      set_fact:
        helm_latest: "{{ output_result.url | basename }}"

    - debug:
        var: helm_latest

    - name: "Download helm"
      get_url:
        url: "https://storage.googleapis.com/kubernetes-helm/helm-{{ helm_latest }}-linux-amd64.tar.gz"
        dest: "/usr/local/src/latest-helm.tar.gz"

    - name: "Extract and install heml"
      unarchive:
        src: /usr/local/src/latest-helm.tar.gz
        dest: /usr/local/src
        copy: no

    - name: "copy to bin directory"
      copy:
        src: /usr/local/src/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: 0755


    #
    # get latest kops URL"
    #
    - name: "get kops latest version"
      uri:
        url: "https://api.github.com/repos/kubernetes/kops/releases/latest"
        method: GET
        body: JSON
        return_contents: yes 
      register: json_output
      check_mode: no

    - name: "Download kops"
      debug:
        msg: "{{ json_output.json.tag_name }}"
    
    - mame: "get download url for latest kops"
      set_fact:
        kops_url: "https://github.com/kubernetes/kops/releases/download/{{ json_output.json.tag_name }}/kops-linux-amd64"
    
    - name: "Download kops"
      get_url:
        url: "{{ kops_url }}"
        dest: "/usr/local/bin/kops"
        mode: 0755


    # name: ensue we have latest npm version
    # https://docs.npmjs.com/getting-started/installing-node
    # npm install npm@latest -g

    - name: install extra system npm modules 
      npm:
        name: '{{ item }}'
        state: present
        global: yes
      with_items:
        "{{ npm_modules }}"
      environment:
        NPM_CONFIG_PREFIX: "{{ npm_config_prefix }}"
        NODE_PATH: "{{ npm_config_prefix }}/lib/node_modules"
        NPM_CONFIG_UNSAFE_PERM: "{{ npm_config_unsafe_perm }}"
        PATH: "{{ npm_config_prefix }}/bin:{{ ansible_env.PATH }}"
      become: yes
      tags:
        - install-npm-packages


    - name: install extra system pip modules 
      pip:
        name: '{{ item }}'
        state: present
        executable: pip2
        # extra_args: --user
      with_items:
        "{{ pip_modules }}"
      become: yes
      tags:
        - install-pip-modules


    - name: "Upgrade existing installed vagrant plugins"
      command: "vagrant plugin update"
      register: vagrant_initial_plugins_list
      changed_when: no
      tags:
        - install-vagrant-plugins

    - name: "List installed vagrant plugins"
      command: "vagrant plugin list"
      register: vagrant_initial_plugins_list
      changed_when: no
      check_mode: no
      tags:
        - install-vagrant-plugins

    - name: "install vagrant plugins"
      command: "vagrant plugin install {{ item }}"
      register: install_vagrant_plugin
      with_items:
        "{{ vagrant_plugins }}"
      when: item not in vagrant_initial_plugins_list.stdout
      tags:
        - install-vagrant-plugins


    - name: "Clone netdata repo"
      git:
        clone: yes
        update: yes
        repo: https://github.com/firehol/netdata.git
        dest: /usr/src/netdata
        version: master
      register: gitupdate

    - name: "Installation"
      command: >
        /usr/src/netdata/netdata-installer.sh 
           --dont-wait --libs-are-really-here
      args:
        chdir: /usr/src/netdata
      when: gitupdate.changed
      tags:
        - skip_ansible_lint 


    - name: "Add user to groups"
      user:
        name: "{{ devops_user }}"
        groups: "{{ item }}"
        append: yes
      with_items:
        - libvirt
        - docker
        # lxd

  handlers:
