---     # deployment of devops workstation

# mongo
# https://download.studio3t.com/studio-3t/linux/2018.2.4/studio-3t-linux-x64.tar.gz
# https://studio3t.com/download-thank-you/?OS=x64


# curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube
# curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl
#  https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip

# curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 && chmod +x docker-machine-driver-kvm2 && sudo mv docker-machine-driver-kvm2 /usr/bin/
# minikube start --vm-driver kvm2

# https://docs.microsoft.com/en-gb/sql/sql-operations-studio/download

- hosts: all
  gather_facts: false
  roles:
    - profiles
   

- hosts: localhost
  become: true
  roles:
    - role: "nickjj.docker"
      tags: ["docker"]  
    - role: gantsign.oh-my-zsh
      users:
        - username: twolf
    - role: fubarhouse.golang

  vars:
    go_version: 1.12.5
    GOPATH: /home "{{ lookup('env', 'USER') }}"/go
    GOROOT: /usr/local/go
    terraform_version: "0.11.13"
    terraform_install_dir: "/usr/local/share/terraform/{{ terraform_version }}"
    terraform_download_url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
    terraform_dep_packages:
    - unzip
    docker__edition: "ce"
    docker__channel: ["stable"]
    docker__version: ""
    aws_region: us-east-1   # Cheapest region by default.
    # Set the version of Node.js to install ("0.12", "4.x", "5.x", "6.x", "8.x").
    # Version numbers from Nodesource: https://github.com/nodesource/distributions
    nodejs_version: "10.x"
    slack_version: 4.0.1
    npm_config_prefix: "/usr"

    devops_user: "{{ lookup('env', 'USER') }}"

    # Set to true to suppress the UID/GID switching when running
    # package scripts. If set explicitly to false, then installing as a
    # non-root user will fail.
    npm_config_unsafe_perm: "false"

    pip_modules:
      - ansible-lint    # https://github.com/willthames/ansible-lint
      - awscli          # http://docs.aws.amazon.com/cli/latest/userguide/getting-help.html
      - boto3           # https://boto3.readthedocs.io/en/latest/guide/quickstart.html
      - boto
      - virtualenv
      - virtualenvwrapper
      - jmespath
      - ec2-ssh
      - docker-compose
      - httpstat
      - docker
      - molecule           # https://molecule.readthedocs.io
      - testinfra
      - pylint
      - pre-commit         # https://pre-commit.com/
      - speedtest_cli
      - python-openstackclient
      - jmespath
      - jmespath-terminal  # jpterm https://github.com/jmespath/jmespath.terminal
      - cheat              # https://github.com/chrisallenlane/cheaf
      # python-pthon-PROJECTclient  # https://docs.openstack.org/newton/user-guide/common/cli-install-openstack-command-line-clients.html

    npm_modules:
      - jsonlint
      - jslint
      - serverless

    vagrant_version: "2.2.5"
    vagrant_tmp_dir: "/tmp/"
    vagrant_tmp_deb: "{{vagrant_tmp_dir}}/vagrant_{{vagrant_version}}.deb"
    vagrant_tmp_rpm: "{{vagrant_tmp_dir}}/vagrant_{{vagrant_version}}.rpm"
    vagrant_virtualbox_install: True
    vagrant_virtualbox_ver: "virtualbox"
    vagrant_url_deb: "https://releases.hashicorp.com/vagrant/{{vagrant_version}}/vagrant_{{vagrant_version}}_{{ansible_architecture}}.deb"

    vagrant_plugins:
      - vagrant-aws
      - vagrant-google
      - vagrant-openstack-provider
      # Add following if vbox or kvm virtualization enabled
      # vagrant-vbguest   # required to install VirtualBox Guest Addtions into the Virtual Machine
      - vagrant-hosts     # https://github.com/oscar-stack/vagrant-hosts
      # vagrant-vbox-snapshot
      # vagrant-libvirt

    snap_classic_packages:
      - powershell
      - goland
      - phpstorm
      - pycharm-professional
      - docker

    snap_packages:
      - spotify
      - vlc

  tasks:
    - name: install dependencies
      apt:
        name: "{{ packages  }}"
      vars:
        packages:    
        - ca-certificates
        - apt-transport-https
        - gconf2
        - libasound2
        - libgtk2.0-0
        - libxss1
        state: presentansible-playbook -l localhost deploy.yml --ask-become

    - name: install key (apt)
      become: yes 
      apt_key:
        url: 'https://packages.microsoft.com/keys/microsoft.asc'
        state: present

    - name: install VS Code repo (apt)
      become: yes 
      apt_repository:
        repo: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
        filename: vscode
        state: present

    - name: install VS Code (apt)
      become: yes 
      apt:
        name: code
        state: present
     
    - name: install packages
      apt:
        name: "{{ packages }}"
      vars:
        packages:
        - vim
        - software-properties-common 
        - apt-transport-https
        - wget
        - jq
        - keepassx
        - openjdk-8-jre
        - remmina
        - terminator
        - openvpn
        - network-manager-openvpn-gnome
        - clamav
        - openvpn
        - iproute2
        - ldap-utils
        - mysql-common
        - postgresql
        - bmon
        - unzip
        - fonts-powerline
        - fonts-inconsolata
        - shellcheck

# Install Terraform

    - name: Ensure required packages are available.
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ terraform_dep_packages }}"
    
    
    - name: Ensure install directory is available.
      file:
        path: "{{ terraform_install_dir }}"
        mode: 0755
        state: directory
    
    - name: "Download terraform {{ terraform_version }} binary."
      get_url: 
          url: "{{ terraform_download_url }}" 
          dest: "/tmp/terraform_{{ terraform_version }}_darwin_amd64.zip"
    
    - name: "Unarchive terraform {{ terraform_version }} zip."
      unarchive:
        copy: no
        src:  "/tmp/terraform_{{ terraform_version }}_darwin_amd64.zip"
        dest: "{{ terraform_install_dir }}"
        creates: "{{ terraform_install_dir }}/terraform"
        mode: 0755
    
    - name: Set symlink to /usr/local/bin/terraform.
      file:
        state: link
        src: "/usr/local/share/terraform/{{ terraform_version }}/terraform"
        dest: "/usr/local/bin/terraform"   
        
    - name: Add terraform autocompletion
      command: terraform -install-autocomplete 
      ignore_errors: true
  
    #
    # Get latest minikube
    #
    - name: "get latest minikube verion"
      uri:
        url: "https://github.com/kubernetes/minikube/releases/latest"
        return_contents: false
      register: output_result

    - name: "get latest version"
      set_fact:
        minikube_latest: "{{ output_result.url | basename }}"
    - debug:
        var: minikube_latest

    - name: "Download latest minikube kvm2 driver"
      get_url:
        url: "https://github.com/kubernetes/minikube/releases/download/{{ minikube_latest }}/docker-machine-driver-kvm2"
        dest: "/usr/bin/docker-machine-driver-kvm2"
        mode: 0755

    - name: "Download minikube latest"
      get_url:
        url: "https://github.com/kubernetes/minikube/releases/download/v0.28.0/minikube-linux-amd64"
        dest: "/usr/local/bin/minikube"
        mode: 0755

    - name: "create autocomplete file"
      command: minikube completion bash
      register: autocompletion
      changed_when: false
      check_mode: false

    - name: "create autocomplete file"
      copy:
        content: "{{ autocompletion.stdout }}"
        dest: /etc/bash_completion.d/minikube

    #
    # Get latest stable kubectl
    #
    - name: "get latest stable kubectl"
      set_fact:
        kubectl_stable: "{{ lookup('url', 'https://storage.googleapis.com/kubernetes-release/release/stable.txt', split_lines=False) | replace('\n', '') }}"

    - debug:
        var: kubectl_stable

    - name: "Download kubectl"
      get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/{{ kubectl_stable }}/bin/linux/amd64/kubectl"
        dest: "/usr/local/src/kubectl-{{ kubectl_stable }}"

    - name: "copy to bin directory"
      copy:
        src: /usr/local/src/kubectl-{{ kubectl_stable }}
        dest: /usr/local/bin/kubectl
        mode: 0755

    - name: "create kubectl file"
      command: kubectl completion bash
      register: autocompletion
      changed_when: false
      check_mode: false

    - name: "create autocomplete file"
      copy:
        content: "{{ autocompletion.stdout }}"
        dest: /etc/bash_completion.d/kubectl



    #
    # Get latest helm
    #
    - name: "get latest kubunetes heml verion"
      uri:
        url: "https://github.com/kubernetes/helm/releases/latest"
        return_contents: false
      register: output_result


    - name: "get latest version"
      set_fact:
        helm_latest: "{{ output_result.url | basename }}"

    - debug:
        var: helm_latest

    - name: "Download helm"
      get_url:
        url: "https://storage.googleapis.com/kubernetes-helm/helm-{{ helm_latest }}-linux-amd64.tar.gz"
        dest: "/usr/local/src/helm-{{ helm_latest }}.tar.gz"

    - name: "Extract and install heml"
      unarchive:
        src: "/usr/local/src/helm-{{ helm_latest }}.tar.gz"
        dest: /usr/local/src
        copy: false

    - name: "copy to bin directory"
      copy:
        src: /usr/local/src/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: 0755

    - name: "create helm completion file"
      command: helm completion bash
      register: autocompletion
      changed_when: false
      check_mode: false

    - name: "create autocomplete file"
      copy:
        content: "{{ autocompletion.stdout }}"
        dest: /etc/bash_completion.d/helm

    #
    # Get latest skaffold
    #
    - name: "get latest skaffold"
      uri:
        url: "https://github.com/GoogleContainerTools/skaffold/releases/latest"
        return_contents: false
      register: output_result

    - name: "get latest version"
      set_fact:
        skaffold_latest: "{{ output_result.url | basename }}"
    - debug:
        var: skaffold_latest

    - name: "Download skaffold"
      get_url:
        url: "https://github.com/GoogleContainerTools/skaffold/releases/download/{{ skaffold_latest }}/skaffold-linux-amd64"
        dest: "/usr/local/src/skaffold_{{ skaffold_latest }}"

    - name: "copy newest version of awless to bin directory"
      copy:
        src: /usr/local/src/skaffold_{{ skaffold_latest }}
        dest: /usr/local/bin/skaffold
        mode: 0755

    - name: "create autocomplete file"
      command: skaffold completion bash
      register: skaffold_completion
      changed_when: false
      check_mode: false

    - name: "create autocomplete file"
      copy:
        content: "{{ skaffold_completion.stdout }}"
        dest: /etc/bash_completion.d/skaffold

    #
    # Get latest awless
    #
    - name: "get latest awless"
      uri:
        url: "https://github.com/wallix/awless/releases/latest"
        return_contents: false
      register: output_result

    - name: "get latest version"
      set_fact:
        awless_latest: "{{ output_result.url | basename }}"
    - debug:
        var: awless_latest

    - name: "Download awless"
      get_url:
        url: "https://github.com/wallix/awless/releases/download/{{ awless_latest }}/awless-linux-amd64.tar.gz"
        dest: "/usr/local/src/awless_{{ awless_latest }}.tar.gz"

    - name: "Extract and install awless"
      unarchive:
        src: /usr/local/src/awless_{{ awless_latest }}.tar.gz
        dest: /usr/local/src

    - name: "copy newest version of awless to bin directory"
      copy:
        src: /usr/local/src/awless
        dest: /usr/local/bin/awless
        mode: 0755

    - name: "create autocomplete file"
      command: awless completion bash
      register: awless_completion
      changed_when: false
      check_mode: false

    - name: "create autocomplete file"
      copy:
        content: "{{ awless_completion.stdout }}"
        dest: /etc/bash_completion.d/awless

    #
    # get latest kops URL"
    #
    - name: "get kops latest version"
      uri:
        url: "https://api.github.com/repos/kubernetes/kops/releases/latest"
        method: GET
        body: JSON
        return_contents: true
      register: json_output
      check_mode: false

    - name: "Download kops"
      debug:
        msg: "{{ json_output.json.tag_name }}"

    - name: "get download url for latest kops"
      set_fact:
        kops_url: "https://github.com/kubernetes/kops/releases/download/{{ json_output.json.tag_name }}/kops-linux-amd64"

    - name: "Download kops"
      get_url:
        url: "{{ kops_url }}"
        dest: "/usr/local/bin/kops"
        mode: 0755

    - name: "create kops completion file"
      command: kops completion bash
      register: autocompletion
      changed_when: false
      check_mode: false

    - name: "create autocomplete file"
      copy:
        content: "{{ autocompletion.stdout }}"
        dest: /etc/bash_completion.d/kops


    - name: install extra system pip modules
      pip:
        name: '{{ item }}'
        state: present
        executable: pip2
        # extra_args: --user
      with_items:
        "{{ pip_modules }}"
      become: true
      tags:
        - install-pip-modules

    - name: Install virtualbox for Debian OS family
      apt: name={{ vagrant_virtualbox_ver }}

    - name: Download vagrant
      get_url: url={{ vagrant_url_deb }} dest={{vagrant_tmp_deb}}

    - name: Install vagrant for Debian OS family
      apt: deb={{vagrant_tmp_deb}}

    - name: "Upgrade existing installed vagrant plugins"
      command: "vagrant plugin update"
      register: vagrant_initial_plugins_list
      changed_when: false
      tags:
        - install-vagrant-plugins

    - name: "List installed vagrant plugins"
      command: "vagrant plugin list"
      register: vagrant_initial_plugins_list
      changed_when: false
      check_mode: false
      tags:
        - install-vagrant-plugins

    # - name: "install vagrant plugins"
    #   command: "vagrant plugin install {{ item }}"
    #   register: install_vagrant_plugin
    #   with_items:
    #     "{{ vagrant_plugins }}"
    #   when: item not in vagrant_initial_plugins_list.stdout
    #   tags:
    #     - install-vagrant-plugins

    - name: apt-get update
      apt: update_cache=true cache_valid_time=3600
      sudo: yes

    - name: install gdebi
      apt: name=gdebi
      sudo: yes

    - name: Check if slack is installed
      command: dpkg-query -W slack-desktop
      register: check_slack
      failed_when: false
      changed_when: false

    - name: Download Ubuntu slack package
      command: "wget -O /tmp/slack-desktop.deb https://downloads.slack-edge.com/linux_releases/slack-desktop-{{ slack_version }}-amd64.deb"
      args:
        creates: "/tmp/slack-desktop.deb"
      when: check_slack.rc == 1

    - name: Install Ubuntu slack package
      sudo: true
      command: gdebi --non-interactive /tmp/slack-desktop.deb
      when: check_slack.rc == 1

